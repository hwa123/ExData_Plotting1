result <- anova(fit, fit3, test = "Chi")
result$Pr
lm(mpg ~ I(wt*0.5) + factor(cyl), data = mtcars)
fit4<-lm(mpg ~ I(wt*0.5) + factor(cyl), data = mtcars)
summary(fit4)
x<- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
lm(x~y)
fit5<- lm(y ~x)
lm.influence(fit5)$hat[5]
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
dfbetas(fits5)[5,2]
dfbetas(fit5)[5,2]
install.packages("UsingR")
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x <- c(x,x*-1)
y<- c(y,y*-1)
mean(y)
plot(x,y)
cor(x,y)
cor(x,y)*sd(y)/sd(x)
data(mtcars)
head(mtcars)
x<-mtcars$wt
y<-mtcars$mpg
cor(x,y)*sd(y)/sd(x)
x*y
sum(x*y)/(sum(x^2))
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x-mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
b1<- corr(x,y)*sd(y)/sd(x)
b1<- cor(x,y)*sd(y)/sd(x)
b2<- mean(y) - b1*mean(x)
b2
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
Sys.date()
now()
library(lubridate)
sys.date()
now()
?Sys.Date
Sys.Date()
swirl()
library(swirl)
swirl()
plot(child ~ parent, glaton)
plot(child ~ parent, galton)
plot(jitter(child,4)~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd = 3, col = 'red')
summary(regrline)
ls(child-parent, galton)
ls(child ~ parent, galton)
lm(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
summary(fit)
fit$residuals
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs - rhs
all.equal(lhs, rhs)
varChild<- var(lc)
varChild<- var(lhs)
varChild<- var(lhs)
varChild<- var(rhs)
varChild<- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var()
varEst <- var(ols.sloope)
varEst <- var(ols.slope)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, sum(varRes, varEst))
all.equal(varChild, varRes+ varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(residuals)
mean(efit$residuals)
cov(attenu$mag)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
l_nor <- lm( dependent ~ independent )
l_nor <- lm( dependent ~ independent, galton$parent )
l_nor <- lm( galton$child ~ galton$parent )
l_nor <- lm( gch_nor ~ gpa_nor)
lm(child ~ parent, galton)
git<-lm(child ~ parent, galton)
fit<-lm(child ~ parent, galton)
sum(sqrt(fit))/(n-2)
sqrt(sum(fit^2)/(n-2))
sqrt(sum(fit*fit)/(n-2))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child -mu)^2)
sRes <- deviance(sum(residuals))
sRes <- deviance(sum(residuals)^2)
sRes <- deviance(sum(residuals^2)
sRes <- deviance(sum(residuals^2))
sRes <- deviance(sum(residuals^2))
sRes <- deviance(sum(galton$child-mu)^2)
sRes <- deviance(sum(galton$child-fit)^2)
sRes <- deviance(sum(galton$child-fit)^2)
sqrt(sum(resid(fit)^2) / (n - 2))
sRes <- deviance(fit)
sRes/sTot-1
1-sRes/sTot
summary(fit)$r
summary(fit)$r.squared
cor(galton$child,galton$parent)
cor(galton$child,galton$parent)^2
ones<- rep(1, nrow(galton))
lm(child ~ ones + parent - 1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(tress)
head(trees)
fit<- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 >- eliminate("Girth", trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2<- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
library("csv")
library("RCurl")
install.packages("bitops")
install.packages("bitops")
library("RCurl")
library("RCurl")
install.packages("RCurl")
install.packages("XML")
install.packages("CSV")
install.packages("data_table")
install.packages("data.table")
install.packages("microbenchmark")
install.packages("Hmisc")
install.packages("jpeg")
install.packages("lubridate")
install.packages("jpeg")
library("swirl")
install.packages("swirl")
library("swirl")
swirl()
swirl()
install_from_swirl("getting and cleaning data")
install_from_swirl("Getting and Cleaning data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Regression Models")
install_from_swirl("Mathematical Biostatistics Boot Camp")
install_from_swirl("Overview of Statistics")
install_from_swirl("R Programming Alt")
install_from_swirl("Data Analysis")
swirl()
cars
cars$mpgCity
myMPG <- cars$mpgCity
mean(myMPG)
median(myMPG)
mode(myMPG)
table(myMPG)
myMPG
mode(myMPG)
mode(table(myMPG))
19
myMPG
table(myMPG)
-table(myMPG)
sort(-table(myMPG))
names(sort(-table(myMPG)))
names(sort(-table(myMPG)))[1]
names(sort(table(myMPG)))[1]
sort(table(myMPG))
table(as.vector(myMPG))
table(myMPG)
temp <- table(myMPG)
names(temp)[temp == max(temp)]
names(temp)
temp
temp == max(temp)
names(temp)[TRUE]
names(temp)[temp == min(temp)]
swirl()
range(cars$price)
range(cars$price)[2]
range(cars$price)[2]-range(car$price)[1]
range(cars$price)[2]-range(cars$price)[1]
var(cars$price)
sg(cars$price)
sd(cars$price)
30
View(cars)
range(cars$price)[2]-range(cars$price)[1]
range(cars$price&cars$type = "midsize")[2]-range(cars$price&cars$type= "midsize")[1]
range(cars$price&cars$type == "midsize")[2]-range(cars$price&cars$type== "midsize")[1]
range(cars$price&cars$type == "midsize")
range(cars$price && cars$type == "midsize")
range(cars$price & cars$type == "large")
range(cars$type == "large")
cars$type == "large"
cars$price[cars$type]
cars$price[cars$type=='large']
5
1
10
25
1
3
2
4
summary(cars$price)
swirl()
install.packages("dplyr")
library("swirl")
swirl()
swirl()
swirl()
swirl()
library(dplyr)
View(mydf)
cran >- tbl_df(mydf)
cran <- tbl_df(mydf)
View(cran)
rm("mydf")
view(Cran)
view(cran)
View(cran)
cran
group_by()
help group_by()
help group_by
help group_by
help(group_by)
by_package <- group_by(cran,package)
by_package
summarize(mean(size))
summarize(by_package)
summarize(by_package,mean(size))
View(by_package)
submit()
tbl
pack_sum
quantile(pack_sum$count,prob=0.99)
top_countsfilter(pack_sum[pack_sum$count > 679])
top_counts<-filter(pack_sum[pack_sum$count > 679])
top_counts<-filter(pack_sum$count > 679)
top_counts<-filter(pack_sum$count[pack_sum$count > 679])
help(filter)
library(filter)
library(dplyr)
help(filter)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
View(top_counts)
arrange(top_counts,count desc)
?arrange
arrange(top_counts,desc(count)
arrange(top_counts,desc(count))
top_counts_sorted<- arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
View(by_package)
View(pack_sum)
filter(pack_sum, unique > 465)
top_unique<-filter(pack_sum, unique > 465)
View(top_unique)
arrange(top_unique,desc(unique))
top_unique_sorted<- arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(results3)
View(result3)
submit()
?mutate
submit()
submit()
submit()
submit()
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
View(result3)
View(mydf)
path2csv
dim(mydf)
head(mydf)
library(dplyr)
packageVersion(("dplyr"))
packageVersion("dplyr")
cran <- tbl_df(mydf)
View(cran)
rm(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cram,-time)
select(cran,-time)
View(cran)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,pckage == "swirl")
filter(cran,package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "IN" | country == "US")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 < -select(cran,size:ip_id)
cran2 <-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3 <- select(ip_id, package, size)
cran3 <- select(cran,ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran, correct_size = size + 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
swirl()
swirl()
install.packages("tidyr")
install.packages("tidyr")
install.packages("tidyr")
library(tidyr)
library("tidyr")
library(tidyr)
library(dplyr)
install.packages("tidyr")
install.packages("tidyr")
install.packages("tidyr")
install.packages("tidyr")
load(file.path("C:\Users\Huan\AppData\Local\Temp\Rtmp2xsGxk/downloaded_packages/tidyr_0.3.1.tar.gz",'.RData'))
load(file.path("C:\Users\Huan\AppData\Local\Temp\Rtmp2xsGxk/downloaded_packages/tidyr_0.3.1.tar.gz",".RData"))
download.file('https://cran.rstudio.com/src/contrib/tidyr_0.3.1.tar.gz',f<- tempfile())
unzip(f,exdir = tempdir())
View(result1)
unzip(f,exdir = tempdir())
load(file.path(tempdir(),'.RData'))
library("sqldf")
package.install("sqldf")
install.packages("sqldf")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv
", destfile = "getdata.csv", method = "libcurl")
acs <- fread(input = "getdata.csv", sep = ",")
acs <- read.csv(textConnection("getdata.csv"))
library("RCurl")
library(RCurl)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
x <- getURL(url,ssl.verifypeer = FALSE)
asc <- read.csv(textConnection(x))
acs <- read.csv(textConnection(x))
View(asc)
sqldf("select pwgtp1 from acs where AGEP < 50")
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
library(RCurl)
htm<- "http://biostat.jhsph.edu/~jleek/contact.html "
con <- url(htm)
htmlcode<-readLines(con =)
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package= "lubridate")
help(package= lubridate)
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975)
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd(//"192012")
ymd("//192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14" )
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
tththis_moment
this_moment
update(this_moment,now())
update(this_moment,hours = 10, minutes = 16, seconds = 0)
this_moment<-update(this_moment,hours = 10, minutes = 16, seconds = 0)
this_moment
nyc<-now()
nyc<-now("America/New_York")
nyc
nyc+days(2)
depart<-nyc+days(2)
depart
depart<-update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + day(1.5)
arrive <- depart + day(2)
arrive <- depart + hours(15)
arrive <- depart + hours(15) + minute(50)
arrive <- depart + hours(15) + minutes(50)
?with)tz
?with_tz
arrive(with_tz(arrive, "Asia/Hong_Kong"))
arrive<-with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- ymd("June 17, 2008", tz = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval()
?new_interval
how_long <- new_interval(last_time,arrive)
as.period(how_long)
?as.period
stopwatch()
install.packages(fields)
install.packages("fields")
install.packages("fields", repos = NULL)
install.packages("fields")
install.packages("map")
install.packages("maps")
getwd()
setwd("C:\Users\Huan\Documents\R\Coursera\Exploratory Data Analysis\Project 1\Data")
setwd("~/R/Coursera/Exploratory Data Analysis/Project 1/Data")
getwd()
filename <- "household_power_consumption.txt"
data <- read.table(filename,
header = TRUE,
sep = ";",
colClasses = c("character","characer",rep("numeric",7)),
na = "?")
data <- read.table(filename,
header = TRUE,
sep = ";",
colClasses = c("character","character",rep("numeric",7)),
na = "?")
dim(data)
attach(data)
?attach
subset<-data[data$Date %in% c("1/2/2007","2/2/2007"),]
sub <- Date == "1/2/2007" | Date == "2/2/2007"
newData <- data[sub,]
newData == subset
head[data]
head(data)
x<- paste(Data, Time)
x<- paste(Date, Time)
newData$DateTime <- strptime(x,"%d/%m/%y %H:%M:%S")
newData$DateTime <- strptime(x,"%d/%m/%Y %H:%M:%S")
head(newData)
attach(newData)
x<-paste(Date,Time)
newData$DateTime <- strptime(x,"%d/%m/%Y %H:%M:%S")
head(newData)
rownames(newData)<-1:nrow(newData)
head(newData)
source("load_data.R")
source("load_data.R")
source("load_data.R")
source("plot1.R")
source("plot1.R")
getwd()
setwd("~/R/Coursera/Exploratory Data Analysis/Project 1")
getwd()
source("plot1.R")
source("plot2.R")
source("plot2.R")
source("plot2.R")
?plot
head(subset)
source("plot2.R")
head(subset)
source("plot2.R")
source("plot2.R")
head(subset)
source("plot3.R")
?legend
?par
source("plot4.R")
source("plot4.R")
source("plot3.R")
